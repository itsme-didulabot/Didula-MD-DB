// Update ‡∑É‡∑ñ‡∂±‡∑ä


const { cmd, commands } = require('../lib/command');
const scraper = require("../lib/scraperd");
const axios = require('axios');
const fetch = require('node-fetch');
const { fetchJson, getBuffer } = require('../lib/functions');
const { lookup } = require('mime-types');
const fs = require('fs');
const path = require('path');
const yts = require('yt-search'); // For YouTube search
const cheerio = require('cheerio'); // Import cheerio for HTML parsing





const xml2js = require('xml2js');













cmd({
    pattern: "movie",
    desc: "Search and show top Sinhala subtitles for films.",
    react: "üé¨",
    category: "download",
    filename: __filename
}, async (conn, mek, m, { from, q, reply }) => {
    try {
        if (!q || q.trim() === "") {
            return reply("*‚ö†Ô∏è Please provide a movie name (E.g: .sinhalasub spider man)*");
        }

        const searchUrl = `https://www.dark-yasiya-api.site/movie/sinhalasub/search?text=${encodeURIComponent(q)}`;
        
        const fetchData = async (url, retries = 3) => {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await axios.get(url, { timeout: 10000 });
                    return response.data;
                } catch (error) {
                    if (i === retries - 1) throw error;
                    await new Promise(r => setTimeout(r, 2000));
                }
            }
        };

        const data = await fetchData(searchUrl);

        if (!data?.result?.data?.length) {
            return reply("*‚ö†Ô∏è No results found. Try including the year (E.g: .sinhalasub love 2015)*");
        }

        const topFilms = data.result.data.slice(0, 20);
        const filmsList = topFilms.map((film, index) => {
            return `${index + 1}. üé¨ *${film.title}*\n   ‚≠ê ${film.imdb} | üìÖ ${film.year} | üì∫ ${film.type}`;
        }).join("\n\n");

        const msg = `üé• *Movie Search Results*\n\nüîç *Query:* ${q}\n\n${filmsList}\n\nüìù *Reply with a number (1-${topFilms.length}) to select*`;

        const sentMsg = await conn.sendMessage(from, { text: msg }, { quoted: mek });

        conn.ev.once("messages.upsert", async ({ messages }) => {
            const response = messages[0];
            if (!response?.message) return;

            const userReply = response.message.conversation || response.message.extendedTextMessage?.text;
            const isReplyToBot = response.message.extendedTextMessage?.contextInfo?.stanzaId === sentMsg.key.id;

            if (!isReplyToBot || !/^\d+$/.test(userReply)) return;

            const selectedIndex = parseInt(userReply) - 1;
            if (selectedIndex < 0 || selectedIndex >= topFilms.length) {
                return reply("*‚ùå Invalid selection. Please choose a number between 1-20*");
            }

            const selectedFilm = topFilms[selectedIndex];
            
            try {
                const movieDetails = await fetchData(`https://www.dark-yasiya-api.site/movie/sinhalasub/movie?url=${selectedFilm.link}`);
                
                if (!movieDetails?.result?.data) {
                    throw new Error("Failed to fetch movie details");
                }

                const { data: movie } = movieDetails.result;

                const detailsMsg = `üé• *MOVIE DETAILS* üé•

*üé¨ Title:* ${movie.title}
*üìÖ Release:* ${movie.date || 'N/A'}
*‚≠ê IMDb:* ${movie.imdbRate || 'N/A'}/10
*‚è±Ô∏è Runtime:* ${movie.runtime || 'N/A'}
*üåç Country:* ${movie.country || 'N/A'}
*üé≠ Genre:* ${movie.category.join(", ")}
*üë®‚Äçüíº Director:* ${movie.director}

*üìù Description:*
${movie.description}

*üé≠ Cast:*
${movie.cast.map(c => `‚Ä¢ ${c.cast_name} (${c.reall_name})`).join("\n")}`;

                await conn.sendMessage(from, {
                    image: { url: movie.image },
                    caption: detailsMsg
                }, { quoted: mek });

                if (movie.dl_links?.length) {
                    const downloadOptions = `
‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™üé¨‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ
‚îÇ üì• *DOWNLOAD OPTIONS*
‚îÇ
${movie.dl_links.map((link, index) => `‚îÇ ${index + 1}. *${link.quality}*
‚îÇ    üì¶ Size: ${link.size}
‚îÇ    üîó Quality: ${link.quality}`).join('\n‚îÇ\n')}
‚îÇ
‚îÇ üìå *Reply with number to download*
‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™üé¨‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`;

                    const dlMsg = await conn.sendMessage(from, { text: downloadOptions }, { quoted: mek });

                    conn.ev.once("messages.upsert", async ({ messages }) => {
                        const dlResponse = messages[0];
                        if (!dlResponse?.message) return;

                        const dlReply = dlResponse.message.conversation || dlResponse.message.extendedTextMessage?.text;
                        const isDlReplyToBot = dlResponse.message.extendedTextMessage?.contextInfo?.stanzaId === dlMsg.key.id;

                        if (!isDlReplyToBot || !/^\d+$/.test(dlReply)) return;

                        const dlIndex = parseInt(dlReply) - 1;
                        if (dlIndex < 0 || dlIndex >= movie.dl_links.length) {
                            return reply("*‚ùå Invalid download option*");
                        }

                        const selectedLink = movie.dl_links[dlIndex];
                        const modifiedLink = selectedLink.link.replace("/u/", "/api/file/");

                        await conn.sendMessage(from, { react: { text: "‚¨áÔ∏è", key: dlResponse.key }});

                        await conn.sendMessage(from, {
                            document: { url: modifiedLink },
                            mimetype: "video/mp4",
                            fileName: `${movie.title} [${selectedLink.quality}].mp4`,
                            caption: `üé¨ *${movie.title}*\nüìä Quality: ${selectedLink.quality}\nüì¶ Size: ${selectedLink.size}`
                        }, { quoted: mek });

                        await conn.sendMessage(from, { react: { text: "‚úÖ", key: dlResponse.key }});
                    });
                }

                if (movie.images?.length) {
                    await conn.sendMessage(from, { text: "*üì∏ Uploading additional images...*" });
                    for (const imageUrl of movie.images) {
                        await conn.sendMessage(from, {
                            image: { url: imageUrl },
                            caption: `üé¨ *${movie.title}* - Additional Image`
                        });
                    }
                }

            } catch (error) {
                reply("*‚ùå Failed to fetch movie details. Please try again later.*");
                console.error(error);
            }
        });

    } catch (error) {
        reply("*‚ùå An error occurred. Please try again later.*");
        console.error(error);
    }
});






cmd({
    pattern: "itnnews",
    desc: "Get the latest ITN news headlines or details of a given link.",
    category: "news",
    react: "üì∞",
    filename: __filename
},
async (conn, mek, m, { from, reply, q }) => {
    try {
        const rssFeedUrl = 'https://www.itnnews.lk/feed/';
        const response = await axios.get(rssFeedUrl);
        const xmlData = response.data;

        const parser = new xml2js.Parser();
        const result = await parser.parseStringPromise(xmlData);

        const newsItems = result.rss.channel[0].item.map(item => ({
            title: item.title[0],
            link: item.link[0],
            description: item.description[0],
            pubDate: item.pubDate[0]
        }));

        // User ‡∂ë‡∂ö‡∂ß link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ì‡∂Ω‡∑è search ‡∂ö‡∂ª‡∑ú‡∂≠‡∑ä
        if (q && q.startsWith("https://www.itnnews.lk/")) {
            const article = newsItems.find(news => news.link === q.trim());
            if (!article) return reply("‚ùå Sorry, this news article was not found in the latest updates!");

            let articleText = `*Didula MD V2 - üì∞ ITN News Details:*\n\n`;
            articleText += `üìå *${article.title}*\n`;
            articleText += `üìÖ _${article.pubDate}_\n`;
            articleText += `üìñ ${article.description}\n`;
            articleText += `üîó ${article.link}\n\n> ·¥© Ä·¥è·¥ä·¥á·¥Ñ·¥õÍú± ·¥èÍú∞ ·¥Ö…™·¥Ö·¥ú ü·¥Ä  Ä·¥ÄÍú± ú·¥ç…™·¥ã·¥Ä`;

            return reply(articleText);
        }

        // User ‡∂ë‡∂ö link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ì‡∂Ω‡∑è ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä Latest 5 news return ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        let newsText = `*üì∞ ITN Latest News:*\n\n`;
        newsItems.slice(0, 5).forEach((news, index) => {
            newsText += `üìå *${index + 1}.* *${news.title}*\n`;
            newsText += `üìÖ _${news.pubDate}_\n`;
            newsText += `üîó ${news.link}\n\n\n> ·¥© Ä·¥è·¥ä·¥á·¥Ñ·¥õÍú± ·¥èÍú∞ ·¥Ö…™·¥Ö·¥ú ü·¥Ä  Ä·¥ÄÍú± ú·¥ç…™·¥ã·¥Ä`;
        });

        reply(newsText);
    } catch (error) {
        console.error("Error fetching ITN News:", error);
        reply("‚ùå Could not fetch ITN news. Please try again later.");
    }
});














cmd({
    pattern: "pornhub",
    alias: ["ph"],
    react: "üé•",
    desc: "download xVideo",
    category: "download",
    filename: __filename
},
async(conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!q) return reply("*‚ö†Ô∏è Please provide a video title or URL*\n\n*Example:* .xvideo Nicolette");

        const query = String(q);
        const searchResponse = await axios.get(`https://ipa-oya.vercel.app/api/ph?q=${encodeURIComponent(query)}`);

        const deta = searchResponse.data;
        const videoUrl = deta.url;

        let desc = `üé• *Didula MD V2 - Now Downloading:* ${deta.title}

‚è≥ *Please wait, processing your request...*`;

        await conn.sendMessage(from, { 
            image: { url: deta.image }, 
            caption: desc 
        }, { quoted: mek }).catch(() => reply("‚ùå Error sending thumbnail"));

        try {
            const downloadResponse = await axios.get(`https://ipa-oya.vercel.app/api/phdl?q=${encodeURIComponent(videoUrl)}`);
            const downloadUrls = downloadResponse.data;

            if (!downloadUrls || downloadUrls.length === 0) {
                return reply("‚ùå No download links found.");
            }

            let downloadMessage = "üé• *Didula MD V2 Successfully Downloaded!*\n\nAvailable Resolutions:\n";
            downloadUrls.forEach((video) => {
                downloadMessage += `- ${video.resolution}p: ${video.download_url}\n`;
            });

            // Send the first download link as a video message
            const firstDownloadUrl = downloadUrls[0].download_url;
            await conn.sendMessage(from, { 
                video: { url: firstDownloadUrl }, 
                caption: downloadMessage 
            }, { quoted: mek });

        } catch (error) {
            reply("‚ùå Error fetching download links: " + error.message);
        }

    } catch (e) {
        console.log(e);
        reply(`‚ùå Error: ${e.message}`);
    }
});


cmd({
    pattern: "xvideo",
    alias: ["xvideo2"],
    react: "üé•",
    desc: "download",
    category: "download",
    filename: __filename
},
async(conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!q) return reply("*‚ö†Ô∏è Please provide a video title or URL*\n\n*Example:* .xvideo My MILF Secretary Love");

        const query = String(q);
        const searchResponse = await axios.get(`https://api.giftedtech.my.id/api/search/xvideossearch?apikey=gifted&query=${encodeURIComponent(query)}`);

        if (!searchResponse.data.results || !searchResponse.data.results.length) {
            return reply("‚ùå No results found! Please try another search.");
        }

        const deta = searchResponse.data.results[0];
        const videoUrl = deta.url;

        let desc = `üé• *Didula MD V2 - Now Downloading:* ${deta.title}

‚è±Ô∏è *Duration:* ${deta.duration}
üëÅÔ∏è *Views:* ${deta.views || 'N/A'}
üìÖ *Quality:* ${deta.quality || 'N/A'}

‚è≥ *Please wait, processing your request...*`;

        await conn.sendMessage(from, { 
            image: { url: deta.thumb }, 
            caption: desc 
        }, { quoted: mek }).catch(() => reply("‚ùå Error sending thumbnail"));

        try {
            const downloadResponse = await axios.get(`https://api.giftedtech.my.id/api/download/xvideosdl?apikey=gifted&url=${encodeURIComponent(videoUrl)}`);

            const downloadUrl = downloadResponse.data.result.download_url;

            await conn.sendMessage(from, { 
                video: { url: downloadUrl }, 
                mimetype: "video/mp4", 
                caption: "üé• *Didula MD V2 Successfully Downloaded!*" 
            }, { quoted: mek });

        } catch (error) {
            reply("‚ùå Error downloading video: " + error.message);
        }

    } catch (e) {
        console.log(e);
        reply(`‚ùå Error: ${e.message}`);
    }
});




cmd({
    pattern: "hirucheck",
    alias: ["hirunews","newshiru","hirulk"],
    react: "‚≠ê",
    category: "search",
    desc: "Fetch the latest news from the SUHAS API in Hiru API.",
    use: "",
    filename: __filename,
},
    async (conn, mek, m, {
        from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber,
        botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName,
        participants, groupAdmins, isBotAdmins, isAdmins, reply
    }) => {
        try {
            const apiUrl = `https://suhas-bro-apii.vercel.app/hiru`;
//Dont Change This API Key
            const response = await axios.get(apiUrl);
            const data = response.data;

            if (!data || !data.newsURL || !data.title || !data.image || !data.text) {
                return reply(`*No News Available At This Moment* ‚ùó`);
            }

            const { newsURL, title, image, text, Power } = data;

            let newsInfo = "ùêÉùê¢ùêùùêÆùê•ùêö ùêåùêÉ ùêïùüê ùêçùêûùê∞ùê¨ üì∞\n\n";
            newsInfo += `‚ú® *Title*: ${title}\n\n`;
            newsInfo += `üìë *Description*:\n${text}\n\n`;
            newsInfo += `‚õìÔ∏è‚Äçüí• *Url*: www.hirunews.lk\n\n`;
            newsInfo += `> *·¥© Ä·¥è·¥ä·¥á·¥Ñ·¥õÍú± ·¥èÍú∞ ·¥Ö…™·¥Ö·¥ú ü·¥Ä  Ä·¥ÄÍú± ú·¥ç…™·¥ã·¥Ä*`;

            if (image) {
                await conn.sendMessage(m.chat, {
                    image: { url: image },
                    caption: newsInfo,
                }, { quoted: m });
            } else {
                await conn.sendMessage(m.chat, { text: newsInfo }, { quoted: m });
            }

        } catch (error) {
            console.error(error);
            reply(`*An Error Occurred While Fetching News At This Moment* ‚ùó`);
        }
    }
);





cmd({
    pattern: "song",
    alias: ["song2"],
    react: "üéµ",
    desc: "download",
    category: "download",
    filename: __filename
},
async(conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
try {
    if (!q) return reply("*‚ö†Ô∏è Please provide a song title or URL*\n\n*Example:* .song Alan Walker - Faded");

    const query = String(q);
    const search = await yts(query);

    if (!search.videos || !search.videos.length) {
        return reply("‚ùå No results found! Please try another search.");
    }

    const deta = search.videos[0];
    const url = deta.url;

    let desc = `üéµ *Now Downloading:* ${deta.title}

üéß *Duration:* ${deta.timestamp}
üëÅÔ∏è *Views:* ${deta.views}
üìÖ *Uploaded:* ${deta.ago}
üë§ *Author:* ${deta.author.name}

‚è≥ *Please wait, processing your request...*`;

    await conn.sendMessage(from, { 
        image: { url: deta.thumbnail }, 
        caption: desc 
    }, { quoted: mek }).catch(() => reply("‚ùå Error sending thumbnail"));

    try {
        const response = await axios.get(`https://api.giftedtech.my.id/api/download/ytmp3?apikey=king_haki-k7gjd8@gifted_api&url=${encodeURIComponent(url)}`);

        const downloadUrl = response.data.result.download_url;

        await conn.sendMessage(from, { 
            audio: { url: downloadUrl }, 
            mimetype: "audio/mpeg", 
            caption: "üéµ *Successfully Downloaded!*" 
        }, { quoted: mek });

        await conn.sendMessage(from, { 
            document: { url: downloadUrl }, 
            mimetype: "audio/mpeg", 
            fileName: `${deta.title}.mp3`, 
            caption: "üìé *Document Version*\n\n‚ú® *Thanks for using our service!*" 
        }, { quoted: mek });

    } catch (error) {
        reply("‚ùå Error downloading audio: " + error.message);
    }

} catch (e) {
    console.log(e);
    reply(`‚ùå Error: ${e.message}`);
}
});

cmd({
    pattern: "video",
    alias: ["video2"],
    react: "üé•",
    desc: "download video",
    category: "download",
    filename: __filename
},
async(conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
try {
    if (!q) return reply("*‚ö†Ô∏è Please provide a video title or URL*\n\n*Example:* .video Alan Walker - Faded");

    const query = String(q);
    const search = await yts(query);

    if (!search.videos || !search.videos.length) {
        return reply("‚ùå No results found! Please try another search.");
    }

    const deta = search.videos[0];
    const url = deta.url;

    let desc = `üé• *Now Downloading:* ${deta.title}

‚è±Ô∏è *Duration:* ${deta.timestamp}
üëÅÔ∏è *Views:* ${deta.views}
üìÖ *Uploaded:* ${deta.ago}
üë§ *Author:* ${deta.author.name}

‚è≥ *Please wait, processing your request...*`;

    await conn.sendMessage(from, { 
        image: { url: deta.thumbnail }, 
        caption: desc 
    }, { quoted: mek }).catch(() => reply("‚ùå Error sending thumbnail"));

    try {
        const response = await axios.get(`https://api.giftedtech.my.id/api/download/ytmp4?apikey=king_haki-k7gjd8@gifted_api&url=${encodeURIComponent(url)}`);

        const downloadUrl = response.data.result.download_url;

        await conn.sendMessage(from, { 
            video: { url: downloadUrl }, 
            mimetype: "video/mp4", 
            caption: "üé• *Successfully Downloaded!*" 
        }, { quoted: mek });

        await conn.sendMessage(from, { 
            document: { url: downloadUrl }, 
            mimetype: "video/mp4", 
            fileName: `${deta.title}.mp4`, 
            caption: "üìé *Document Version*\n\n‚ú® *Thanks for using our service!*" 
        }, { quoted: mek });

    } catch (error) {
        reply("‚ùå Error downloading video: " + error.message);
    }

} catch (e) {
    console.log(e);
    reply(`‚ùå Error: ${e.message}`);
}
});


cmd({
    pattern: "happy",
    desc: "Displays a dynamic edit msg for fun.",
    category: "other",
    react: "üòÇ",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòÇ' });
        const emojiMessages = [
            "üòÉ", "üòÑ", "üòÅ", "üòä", "üòé", "ü•≥",
            "üò∏", "üòπ", "üåû", "üåà", "üòÉ", "üòÑ",
            "üòÅ", "üòä", "üòé", "ü•≥", "üò∏", "üòπ",
            "üåû", "üåà", "üòÉ", "üòÑ", "üòÅ", "üòä"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "heart",
    desc: "Displays a dynamic edit msg for fun.",
    category: "other",
    react: "‚ù§Ô∏è",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üñ§' });
        const emojiMessages = [
            "üíñ", "üíó", "üíï", "ü©∑", "üíõ", "üíö",
            "ü©µ", "üíô", "üíú", "üñ§", "ü©∂", "ü§ç",
            "ü§é", "‚ù§Ô∏è‚Äçüî•", "üíû", "üíì", "üíò", "üíù",
            "‚ô•Ô∏è", "üíü", "‚ù§Ô∏è‚Äçü©π", "‚ù§Ô∏è"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "angry",
    desc: "Displays a dynamic edit msg for fun.",
    category: "other",
    react: "ü§°",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üëΩ' });
        const emojiMessages = [
            "üò°", "üò†", "ü§¨", "üò§", "üòæ", "üò°",
            "üò†", "ü§¨", "üò§", "üòæ"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "sad",
    desc: "Displays a dynamic edit msg for fun.",
    category: "other",
    react: "üò∂",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üòî' });
        const emojiMessages = [
            "ü•∫", "üòü", "üòï", "üòñ", "üò´", "üôÅ",
            "üò©", "üò•", "üòì", "üò™", "üò¢", "üòî",
            "üòû", "üò≠", "üíî", "üò≠", "üòø"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "shy",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üßê",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üßê' });
        const emojiMessages = [
            "üò≥", "üòä", "üò∂", "üôà", "üôä",
            "üò≥", "üòä", "üò∂", "üôà", "üôä"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "moon",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üåö",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üåù' });
        const emojiMessages = [
            "üåó", "üåò", "üåë", "üåí", "üåì", "üåî",
            "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí",
            "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò",
            "üåë", "üåí", "üåì", "üåî", "üåï", "üåñ",
            "üåó", "üåò", "üåë", "üåí", "üåì", "üåî",
            "üåï", "üåñ", "üåùüåö"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "confused",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "ü§î",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'ü§î' });
        const emojiMessages = [
            "üòï", "üòü", "üòµ", "ü§î", "üòñ", 
            "üò≤", "üò¶", "ü§∑", "ü§∑‚Äç‚ôÇÔ∏è", "ü§∑‚Äç‚ôÄÔ∏è"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "hot",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üíã",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'üíã' });
        const emojiMessages = [
            "ü•µ", "‚ù§Ô∏è", "üíã", "üò´", "ü§§", 
            "üòã", "ü•µ", "ü•∂", "üôä", "üòª", 
            "üôà", "üíã", "ü´Ç", "ü´Ä", "üëÖ", 
            "üëÑ", "üíã"
        ];

        for (const line of emojiMessages) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: line,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

cmd({
    pattern: "didula",
    desc: "Displays a dynamic edit msg for fun.",
    category: "tools",
    react: "üóø",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: 'Didula-AIüóø' });

        // Define the ASCII art messages
        const asciiMessages = [
            "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä‚†Ä   ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä  ‚†Ä    ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   Nikal   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä      ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä‚†Ä__‚†Ä   ‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`", "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚†Ä  ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä‚†Ä   ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä       ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤     ‚£ø  ‚£∏   Lavde   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä      ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä|__|‚†Ä‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`", "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä     ‚†Ä   ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä    ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä      ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏   Pehli   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä     ‚£ø  ‚¢π‚†Ä           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä(P)‚†Ä‚†Ä     ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`", "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä     ‚†Ä   ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä    ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä   ‚†Ä     ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏  Fursat  ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä        ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä‚†Ä__ ‚†Ä  ‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`", "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä      ‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä    ‚†Ä  ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä‚†Ä ‚†Ä      ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤    ‚£ø  ‚£∏  Meeee   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä‚†Ä       ‚£ø  ‚¢π‚†Ä          ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Ä|__| ‚†Ä    ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä    ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä`", "‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°æ‚†è‚†â‚†ô‚†≥‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†â‚†ô‚†≤‚°Ä‚†Ä\n ‚†Ä‚£¥‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä   ‚†Ä  ‚†Ä‚¢≥‚°Ä‚†Ä‚°è‚†Ä‚†Ä       ‚¢∑\n‚¢†‚£ü‚£ã‚°Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚£Ä‚°Ä   ‚£ß‚†Ä‚¢∏‚†Ä  ‚†Ä       ‚°á\n‚¢∏‚£Ø‚°≠‚†Å‚†∏‚£õ‚£ü‚†Ü‚°¥‚£ª‚°≤   ‚£ø  ‚£∏   Nikal   ‚°á\n ‚£ü‚£ø‚°≠‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢±‚†Ä       ‚£ø  ‚¢π‚†Ä           ‚°á\n  ‚†ô‚¢ø‚£Ø‚†Ñ‚†Ä‚†Älodu‚†Ä‚†Ä   ‚°ø ‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä   ‚°º\n‚†Ä‚†Ä‚†Ä‚†π‚£∂‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚°¥‚†É‚†Ä   ‚†ò‚†§‚£Ñ‚£†‚†û‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∑‚°¶‚¢§‚°§‚¢§‚£û‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚¢Ä‚£§‚£¥‚£ø‚£è‚†Å‚†Ä‚†Ä‚†∏‚£è‚¢Ø‚£∑‚£ñ‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚¢Ä‚£æ‚£Ω‚£ø‚£ø‚£ø‚£ø‚†õ‚¢≤‚£∂‚£æ‚¢â‚°∑‚£ø‚£ø‚†µ‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚£º‚£ø‚†ç‚†â‚£ø‚°≠‚†â‚†ô‚¢∫‚£á‚£º‚°è‚†Ä‚†Ä ‚†Ä‚£Ñ‚¢∏‚†Ä"
        ];

        // Send the initial loading message
        for (const asciiMessage of asciiMessages) {
            await new Promise(resolve => setTimeout(resolve, 500)); // Delay for 500ms second
            await conn.relayMessage(
                from,
                {
                    protocolMessage: {
                        key: loadingMessage.key,
                        type: 14,
                        editedMessage: {
                            conversation: asciiMessage,
                        },
                    },
                },
                {}
            );
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});

// > JawadTechX 







cmd({
    pattern: "owner",
    desc: "To check ping",
    category: "main",
    react: "üë§",
    filename: __filename
},
async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
try{

const vcard = 'BEGIN:VCARD\n'
            + 'VERSION:3.0\n' 
            + 'FN:Didula Rashmika\n'
            + 'ORG:Didula MD V2;\n'
            + 'TEL;type=CELL;type=VOICE;waid=94741671668:+94 741 671 668\n'
            + 'TEL;type=CELL;type=VOICE;waid=94771820962:+94 771 820 962\n'
            + 'END:VCARD'

await conn.sendMessage(from, { 
    contacts: { 
        displayName: 'Didula Rashmika', 
        contacts: [{ vcard }] 
    }
},{quoted:mek})

await conn.sendMessage(from,{image:{url: 'https://files.catbox.moe/za6ytm.jpg'},caption: `*üë§ Didula MD V2 Owner Details*\n\n*üë®‚Äçüíª Owner Name:* Didula Rashmika\n*üì± Owner Number:* wa.me/94741671668\n*üì± Owner Number:* wa.me/94771820962\n\n\n*üí´ Thanks For Using Didula MD V2*`},{quoted:mek})

} catch (e) {
    reply(e)
    }
})





cmd({
    pattern: "repo",
    desc: "repo the bot",
    react: "üì°",
    category: "main",
    filename: __filename
},
async(conn, mek, m, {from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try {
        let dec = `*DIDULA MD V2 NEW UPDATE‚úÖ*

*‚≠ï REPO URL*
\`\`\`https://github.com/itsme-didulabot/Didula-MD-V2\`\`\`

*‚≠ï GET SESSION ID*
\`\`\`https://prabath-md-pair-web-v2-slk.koyeb.app/pair\`\`\`

*‚≠ï HEROKU DEPLOY*
\`\`\`https://dashboard.heroku.com/new-app?template=https://github.com/itsme-didulabot/Didula-MD-V2\`\`\`

*Deploy Video ‚úÖ*

https://youtu.be/AtjXpHEwyKg?si=iLIxkkr4ujCu72cj


SPECIAL FEATURES üëÄ

> Chanel working
> Heart React
> Anti Bug Message
> Anti Bad/Bot/Link/Call
> AI Chat
> Auto Status Seen React and Reply
> Anti Once View
> Send Status to reply
> Anti Delete
> Commands 100+

*AUTO PLUGIN UPDATE*

üì•FOLLOW FOR UPDATE
https://whatsapp.com/channel/0029VaqqF4GDTkJwKruLSK2f`;

        await conn.sendMessage(from, {
            image: {url: 'https://files.catbox.moe/za6ytm.jpg'},
            caption: dec
        }, {quoted: mek});

    } catch(e) {
        console.log(e);
        reply(`${e}`);
    }
});
